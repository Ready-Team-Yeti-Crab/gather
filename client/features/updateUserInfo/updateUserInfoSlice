import { createSlice } from '@reduxjs/toolkit';

const updateUserInfoInitialState = {
	profilePicture: '',
    currentLocation: 
};

//https://redux-toolkit.js.org/tutorials/quick-start

//export default counterSlice
export const updateUserInfoSlice = createSlice({
	name: 'updateUserInfo',
	updateUserInfoInitialState,
	reducers: {
		changeProfilePicture: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			state.profilePicture += 1;
		},
	    changeCurrentLocation: (state) => {
			// This example adds a search box to a map, using the Google Place Autocomplete
			// feature. People can enter geographical searches. The search box will return a
			// pick list containing a mix of places and predicted search terms.
			// This example requires the Places library. Include the libraries=places
			// parameter when you first load the API. For example:
			// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
			function initAutocomplete() {
				const map = new google.maps.Map(document.getElementById("map"), {
				center: { lat: -33.8688, lng: 151.2195 },
				zoom: 13,
				mapTypeId: "roadmap",
				});
				// Create the search box and link it to the UI element.
				const input = document.getElementById("pac-input");
				const searchBox = new google.maps.places.SearchBox(input);
			
				map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
				// Bias the SearchBox results towards current map's viewport.
				map.addListener("bounds_changed", () => {
				searchBox.setBounds(map.getBounds());
				});
			
				let markers = [];
			
				// Listen for the event fired when the user selects a prediction and retrieve
				// more details for that place.
				searchBox.addListener("places_changed", () => {
				const places = searchBox.getPlaces();
			
				if (places.length == 0) {
					return;
				}
			
				// Clear out the old markers.
				markers.forEach((marker) => {
					marker.setMap(null);
				});
				markers = [];
			
				// For each place, get the icon, name and location.
				const bounds = new google.maps.LatLngBounds();
			
				places.forEach((place) => {
					if (!place.geometry || !place.geometry.location) {
					console.log("Returned place contains no geometry");
					return;
					}
			
					const icon = {
					url: place.icon,
					size: new google.maps.Size(71, 71),
					origin: new google.maps.Point(0, 0),
					anchor: new google.maps.Point(17, 34),
					scaledSize: new google.maps.Size(25, 25),
					};
			
					// Create a marker for each place.
					markers.push(
					new google.maps.Marker({
						map,
						icon,
						title: place.name,
						position: place.geometry.location,
					})
					);
					if (place.geometry.viewport) {
					// Only geocodes have viewport.
					bounds.union(place.geometry.viewport);
					} else {
					bounds.extend(place.geometry.location);
					}
				});
				map.fitBounds(bounds);
				});
			}
			
			window.initAutocomplete = initAutocomplete;

					},
				},
			});

// Action creators are generated for each case reducer function
export const { profilePicture, currentLocation} = updateUserInfoSlice.actions;

export default updateUserInfoSlice.reducer;
